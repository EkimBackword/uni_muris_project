import Telegraf, { Context, ContextMessageUpdate } from 'telegraf';
const SocksAgent = require('socks5-https-client/lib/Agent');
import { TELEGRAM_CONFIG, SENTRY_CONFIG } from '../config/database.config';

const Sentry = require('@sentry/node');
Sentry.init({ dsn: SENTRY_CONFIG.dsn });

const Markup = require('telegraf/markup');
const session = require('telegraf/session');
const passwordHash = require('password-hash');

let Instance: TelegramService = null;

export class TelegramService {
    private bot: Telegraf<ContextMessageUpdate>;
    readonly socksAgent = new SocksAgent({
        socksHost: TELEGRAM_CONFIG.proxy.host,
        socksPort: TELEGRAM_CONFIG.proxy.port,
        socksUsername: TELEGRAM_CONFIG.proxy.login,
        socksPassword: TELEGRAM_CONFIG.proxy.psswd,
    });

    constructor() {
        const config = TELEGRAM_CONFIG.needProxy ? { telegram: { agent: this.socksAgent } } : {};
        this.bot = new Telegraf(TELEGRAM_CONFIG.apiToken, config);
        this.init();
        (this.bot as any).catch((err: any) => {
            console.log('Ooops', err);
            Sentry.captureException(err);
        });
        this.bot.startPolling();
        Instance = this;
    }

    static getInstance() {
        if (Instance === null) {
            Instance = new TelegramService();
        }
        return Instance;
    }

    sendMessage(msg: string, chatId: string|number, extra?: any) {
        return this.bot.telegram.sendMessage(chatId, msg, extra);
    }

    private init() {
        this.bot.use(session());
        this.bot.start((ctx) => this.start(ctx));
        this.bot.help((ctx) => this.help(ctx));
        this.bot.on('sticker', (ctx) => ctx.reply('üëç'));

        this.commandHandler();
        this.actionHandler();
        this.hearsHandler();
    }

    private start(ctx: ContextMessageUpdate) {
        return ctx.reply(`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é: /help
        `);
    }

    private help(ctx: ContextMessageUpdate) {
        return ctx.reply(`
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Å—Ç–∏–∫–µ—Ä))
–ù–æ —ç—Ç–æ –Ω–µ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ.

–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
1) /auth [Login]:[Password]
2) /any_command`);
    }

    private commandHandler() {
        this.bot.command('auth', (ctx) => this.auth(ctx));
        this.bot.command('any_command', (ctx) => this.any_command(ctx));
    }

    private async auth(ctx: ContextMessageUpdate) {
        const msg = /\/auth (.*)/.exec(ctx.message.text);
        try {
            const Login = msg[1].split(':')[0];
            const Password = msg[1].split(':')[1];
            const _Password = Password ? Password : this.generatePassword();
            return ctx.reply(`–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ ${TELEGRAM_CONFIG.siteUrl}
–õ–æ–≥–∏–Ω: ${Login};
–ü–∞—Ä–æ–ª—å: ${_Password}
`);
        } catch (err) {
            return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
        }
    }

    private async any_command(ctx: ContextMessageUpdate) {
        const user: any = null; // await User.find<User>({ where: { 'ChatID': ctx.chat.id } });
        if (user) {
            (ctx as any).session.user = user.toJSON();
            return ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—É—Ä–Ω–∏—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');

        } else {
            return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /check_in [BattleTag]:[Password]');
        }
    }

    private actionHandler() {
        (this.bot as any).action(/(any|some):select:(.*)/, (ctx: ContextMessageUpdate) => this.select(ctx));
    }

    private async select(ctx: ContextMessageUpdate) {
        const match = (ctx as any).match;
        return ctx.reply(`Select! ${match[1]}`);
    }

    private hearsHandler() {
        this.bot.hears(/[–ü,–ø]—Ä–∏–≤–µ—Ç/i, (ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è'));
        this.bot.hears(/(.*) [–ü,–ø]–æ–∫–∞ (.*)/i, (ctx) => {
            console.log((ctx as any).match);
            return ctx.reply('–ü–æ–∫–∞ –ø–æ–∫–∞');
        });
    }

    private generatePassword() {
        const length = 8;
        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let retVal = '';
        for (let i = 0, n = charset.length; i < length; ++i) {
            retVal += charset.charAt(Math.floor(Math.random() * n));
        }
        return retVal;
    }
}