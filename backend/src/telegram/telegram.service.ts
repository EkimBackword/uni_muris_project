import Telegraf, { Context, ContextMessageUpdate } from 'telegraf';
const SocksAgent = require('socks5-https-client/lib/Agent');
import { TELEGRAM_CONFIG, SENTRY_CONFIG } from '../config/database.config';
import User, { IUser, UserRoles } from '../models/User';
import { UserController } from '../controllers/User.controller';

const Sentry = require('@sentry/node');
Sentry.init({ dsn: SENTRY_CONFIG.dsn });

const Markup = require('telegraf/markup');
const session = require('telegraf/session');
const passwordHash = require('password-hash');

let Instance: TelegramService = null;

export class TelegramService {
    private bot: Telegraf<ContextMessageUpdate>;
    readonly socksAgent = new SocksAgent({
        socksHost: TELEGRAM_CONFIG.proxy.host,
        socksPort: TELEGRAM_CONFIG.proxy.port,
        socksUsername: TELEGRAM_CONFIG.proxy.login,
        socksPassword: TELEGRAM_CONFIG.proxy.psswd,
    });
    private schedule: any[] = [
        [null, {'even': '2-103 –ë–ñ –¢–∏–º–∞–ª–∏–Ω–∞  –ï.–Æ.', 'odd': '2-109 –†–Ø–∏–ö–† –î–∞—Å—å–∫–æ –ê.–ê.', 'base': null}, {'even': null, 'odd': null, 'base': '4-403 –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ì–∞—Å–ø–∞—Ä—è–Ω –ì.–°.'}, {'even': '1-118 –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ñ–ò–ó–ù–ï–î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–ò (–ë–ñ) –¥–æ—Ü–µ–Ω—Ç   –¢–∏–º–∞–ª–∏–Ω–∞  –ï.–Æ.', 'odd': '1-118 –†–£–°–°–ö–ò–ô  –Ø–ó–´–ö  –ò  –ö–£–õ–¨–¢–£–†–ê  –†–ï–ß–ò (–†–Ø–∏–ö–†) –¥–æ—Ü–µ–Ω—Ç  –î–∞—Å—å–∫–æ –ê.–ê.', 'base': null}, null, null],
        [{'even': null, 'odd': null, 'base': '1-118 –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ú–ê) –¥–æ—Ü–µ–Ω—Ç –ö–æ–ø—ã–ª–æ–≤–∞ –¢.–í.'}, {'even': null, 'odd': null, 'base': '2-310 –ú–ê –ö–æ–ø—ã–ª–æ–≤–∞ –¢.–í.'}, {'even': null, 'odd': null, 'base': '4-317 –ò—Å—Ç–æ—Ä–∏—è –ö–æ—Ä–æ–ª—å –ú.–ü.'}, {'even': '1-122 –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï –ù–ê –Ø–ó–´–ö–ï –í–´–°–û–ö–û–ì–û –£–†–û–í–ù–Ø (–ü–Ø–í–£) –¥–æ—Ü–µ–Ω—Ç –°—ã—á–µ–≤ –ü.–ü.', 'odd': null, 'base': null}, null, null],
        [null, {'even': '2-103 –ë–ñ –¢–∏–º–∞–ª–∏–Ω–∞  –ï.–Æ.', 'odd': '2-109 –†–Ø–∏–ö–† –î–∞—Å—å–∫–æ –ê.–ê.', 'base': null}, {'even': null, 'odd': null, 'base': '4-403 –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ì–∞—Å–ø–∞—Ä—è–Ω –ì.–°.'}, {'even': '1-118 –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ñ–ò–ó–ù–ï–î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–ò (–ë–ñ) –¥–æ—Ü–µ–Ω—Ç   –¢–∏–º–∞–ª–∏–Ω–∞  –ï.–Æ.', 'odd': '1-118 –†–£–°–°–ö–ò–ô  –Ø–ó–´–ö  –ò  –ö–£–õ–¨–¢–£–†–ê  –†–ï–ß–ò (–†–Ø–∏–ö–†) –¥–æ—Ü–µ–Ω—Ç  –î–∞—Å—å–∫–æ –ê.–ê.', 'base': null}, null, null],
        [{'even': null, 'odd': null, 'base': '1-118 –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ú–ê) –¥–æ—Ü–µ–Ω—Ç –ö–æ–ø—ã–ª–æ–≤–∞ –¢.–í.'}, {'even': null, 'odd': null, 'base': '2-310 –ú–ê –ö–æ–ø—ã–ª–æ–≤–∞ –¢.–í.'}, {'even': null, 'odd': null, 'base': '4-317 –ò—Å—Ç–æ—Ä–∏—è –ö–æ—Ä–æ–ª—å –ú.–ü.'}, {'even': '1-122 –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï –ù–ê –Ø–ó–´–ö–ï –í–´–°–û–ö–û–ì–û –£–†–û–í–ù–Ø (–ü–Ø–í–£) –¥–æ—Ü–µ–Ω—Ç –°—ã—á–µ–≤ –ü.–ü.', 'odd': null, 'base': null}, null, null],
        [null, {'even': '2-103 –ë–ñ –¢–∏–º–∞–ª–∏–Ω–∞  –ï.–Æ.', 'odd': '2-109 –†–Ø–∏–ö–† –î–∞—Å—å–∫–æ –ê.–ê.', 'base': null}, {'even': null, 'odd': null, 'base': '4-403 –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ì–∞—Å–ø–∞—Ä—è–Ω –ì.–°.'}, {'even': '1-118 –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ñ–ò–ó–ù–ï–î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–ò (–ë–ñ) –¥–æ—Ü–µ–Ω—Ç   –¢–∏–º–∞–ª–∏–Ω–∞  –ï.–Æ.', 'odd': '1-118 –†–£–°–°–ö–ò–ô  –Ø–ó–´–ö  –ò  –ö–£–õ–¨–¢–£–†–ê  –†–ï–ß–ò (–†–Ø–∏–ö–†) –¥–æ—Ü–µ–Ω—Ç  –î–∞—Å—å–∫–æ –ê.–ê.', 'base': null}, null, null],
        [{'even': null, 'odd': null, 'base': '1-118 –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–ú–ê) –¥–æ—Ü–µ–Ω—Ç –ö–æ–ø—ã–ª–æ–≤–∞ –¢.–í.'}, {'even': null, 'odd': null, 'base': '2-310 –ú–ê –ö–æ–ø—ã–ª–æ–≤–∞ –¢.–í.'}, {'even': null, 'odd': null, 'base': '4-317 –ò—Å—Ç–æ—Ä–∏—è –ö–æ—Ä–æ–ª—å –ú.–ü.'}, {'even': '1-122 –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï –ù–ê –Ø–ó–´–ö–ï –í–´–°–û–ö–û–ì–û –£–†–û–í–ù–Ø (–ü–Ø–í–£) –¥–æ—Ü–µ–Ω—Ç –°—ã—á–µ–≤ –ü.–ü.', 'odd': null, 'base': null}, null, null]
    ];

    constructor() {
        const config = TELEGRAM_CONFIG.needProxy ? { telegram: { agent: this.socksAgent } } : {};
        this.bot = new Telegraf(TELEGRAM_CONFIG.apiToken, config);
        this.init();
        (this.bot as any).catch((err: any) => {
            Sentry.captureException(err);
        });
        this.bot.startPolling();
        Instance = this;
    }

    static getInstance() {
        if (Instance === null) {
            Instance = new TelegramService();
        }
        return Instance;
    }

    sendMessage(msg: string, chatId: string|number, extra?: any) {
        return this.bot.telegram.sendMessage(chatId, msg, extra);
    }

    private init() {
        this.bot.use(session());
        this.bot.start((ctx) => this.start(ctx));
        this.bot.help((ctx) => this.help(ctx));
        this.bot.on('sticker', (ctx) => ctx.reply('üëç'));

        this.commandHandler();
        this.hearsHandler();
    }

    private start(ctx: ContextMessageUpdate) {
        return ctx.reply(`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é: /help
        `);
    }

    private help(ctx: ContextMessageUpdate) {
        return ctx.reply(`
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Å—Ç–∏–∫–µ—Ä))
–ù–æ —ç—Ç–æ –Ω–µ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ.

–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
1) /login [Login]:[Password]
1) /logout
2) /getinfo
3) /test
`);
    }

    private commandHandler() {
        this.bot.command('signup', (ctx) => this.sign_up(ctx));
        this.bot.command('login', (ctx) => this.log_in(ctx));
        this.bot.command('logout', (ctx) => this.log_out(ctx));
        this.bot.command('getinfo', (ctx) => this.get_info(ctx));
        this.bot.command('test', (ctx) => this.test(ctx));
    }

    private async sign_up(ctx: ContextMessageUpdate) {
        const msg = /\/signup (.*)/.exec(ctx.message.text);

        try {
            const Login = msg[1].split(':')[0];
            const Password = msg[1].split(':')[1];

            const existsUser = await User.findOne<User>({where: { Login: Login }});
            if (existsUser != null) {
                return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Login —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            const _Password = Password ? Password : this.generatePassword();
            const last_name = ctx.chat.last_name ? ctx.chat.last_name + ' ' : '';
            const first_name = ctx.chat.first_name ? ctx.chat.first_name + ' ' : '';
            let FIO = `${last_name} ${first_name}`;
            if (!last_name && !first_name) {
                FIO = 'NONAME';
            }

            const hash = passwordHash.generate(_Password);
            const data: IUser = {
                Login: Login,
                FIO: FIO,
                Role: UserRoles.admin,
                Hash: hash
            };
            let newUser = new User(data);
            newUser = await newUser.save();
            return ctx.reply(`–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ ${TELEGRAM_CONFIG.siteUrl}
–õ–æ–≥–∏–Ω: ${Login};
–ü–∞—Ä–æ–ª—å: ${_Password}
`);
        } catch (err) {
            console.log(err);
            return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
        }
    }

    private async get_info(ctx: ContextMessageUpdate) {
        try {
            const user: User = await User.findOne<User>({ where: { 'TelegramID': ctx.chat.id } });
            if (user) {
                const Login = user.Login ? user.Login : '';
                const FIO = user.FIO ? user.FIO : '';
                const Role = user.Role ? user.Role : '';
                const GroupID = user.GroupID ? user.GroupID : '';
                return ctx.reply(`
–õ–æ–≥–∏–Ω: ${Login}
–§–ò–û: ${FIO}
–†–æ–ª—å: ${Role}
–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: ${GroupID}`);
            } else {
                return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∫–∞–∫ /login [Login]:[Password]');
            }
        } catch (err) {
            console.log(err);
            return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
        }
    }
    private async log_in(ctx: ContextMessageUpdate) {
        let user: User = await User.findOne<User>({ where: { 'TelegramID': ctx.chat.id } });
        if (user) {
            return ctx.reply(`–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –∫–∞–∫ ${user.FIO}.`);
        }

        const msg = /\/login (.*)/.exec(ctx.message.text);
        try {
            if (msg) {
                const Login = msg[1].split(':')[0];
                const Password = msg[1].split(':')[1];
                user =  await User.findOne<User>({ where: { Login: Login } });
                if (!user) {
                    return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω');
                }
                if (!passwordHash.verify(Password, user.Hash)) {
                    return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å');
                }
                user.TelegramID = ctx.chat.id;
                await user.save();
                return ctx.reply(`–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, ${user.FIO}!`);
            } else {
                return ctx.reply(`–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!`);
            }
        } catch (err) {
            console.log(err);
            return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
        }
    }
    private async log_out(ctx: ContextMessageUpdate) {
        try {
            const user: User = await User.findOne<User>({ where: { 'TelegramID': ctx.chat.id } });
            if (user) {
                user.TelegramID = null;
                await user.save();
                return ctx.reply(`–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!`);
            } else {
                return ctx.reply(`–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!`);
            }
        } catch (err) {
            console.log(err);
            return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
        }
    }

    private async test(ctx: ContextMessageUpdate) {
        try {
            const user: User = await User.findOne<User>({ where: { 'TelegramID': ctx.chat.id } });
            if (user) {
                return ctx.reply(`TEST –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ: ${user.FIO}`);
            } else {
                const users = await User.findAll<User>();
                return ctx.reply(`TEST –¥–ª—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ: –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${users.length}`);
            }
        } catch (err) {
            console.log(err);
            return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
        }
    }

    private hearsHandler() {
        this.bot.hears(/(.*)—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ(.*)/i, (ctx) => this.get_schedule(ctx));
        this.bot.hears(/(.*)[–ó,–∑]–∞–¥–∞–Ω–∏[–µ,—è,–π](.*)/i, (ctx) => ctx.reply(`–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!`));
    }

    private async get_schedule(ctx: ContextMessageUpdate) {
        let indexOfDay = new Date().getDay();
        try {
            const time = [ '09:00 - 10:30', '10:40 - 12:10', '12:50 - 14:20', '14:30 - 16:00', '16:10 - 17:40', '17:50 - 19:20'];
            const week = [ '', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' ];
            let dayWeek = /([–ü,–ø]–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|[–í,–≤]—Ç–æ—Ä–Ω–∏–∫|[–°,—Å]—Ä–µ–¥–∞|[–ß,—á]–µ—Ç–≤–µ—Ä–≥|[–ü,–ø]—è—Ç–Ω–∏—Ü–∞|[–°,—Å]—É–±–±–æ—Ç–∞|[–í,–≤]–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)/.exec(ctx.message.text);
            if (dayWeek && dayWeek.length > 0) {
                let curentDay = week.find(day =>  day.toLocaleLowerCase() === dayWeek[0].toLocaleLowerCase());
                let index = week.indexOf(curentDay);
                if (index > -1) {
                    indexOfDay = index;
                }
            }
            if (indexOfDay === 7) {
                return ctx.reply(`–í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π!`);
            }
            const user: User = await User.findOne<User>({ where: { 'TelegramID': ctx.chat.id } });
            if (user) {
                let curSchedule: any[] = this.schedule[indexOfDay];
                return ctx.reply(curSchedule.reduce(
                    (prev, val, index) => {
                        let msg = `
–ü–∞—Ä–∞ ‚Ññ ${(index + 1)} (${time[index]}): `;
                        if (!val) {
                            msg += `–û–∫–Ω–æ`;
                        } else {
                            if (val.even) {
                                msg += `
\*–ü–æ —á—ë—Ç–Ω—ã–º –Ω–µ–¥–µ–ª—è–º\*: ${val.even}`;
                            }
                            if (val.odd) {
                                msg += `
–ü–æ –Ω–µ—á—ë—Ç–Ω—ã–º –Ω–µ–¥–µ–ª—è–º: ${val.odd}`;
                            }
                            if (val.base) {
                                msg += `
–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é: ${val.base}`;
                            }
                        }
                        return prev + msg + `
`;
                    }, `${week[indexOfDay]}
`
                ));
            } else {
                return ctx.reply(`–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!`);
            }
        } catch (err) {
            console.log(err);
            return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
        }
    }

    private generatePassword() {
        const length = 8;
        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let retVal = '';
        for (let i = 0, n = charset.length; i < length; ++i) {
            retVal += charset.charAt(Math.floor(Math.random() * n));
        }
        return retVal;
    }
}